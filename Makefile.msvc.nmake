# Makefile for less.
# Windows version; MS Visual C++
# nmake version

# `nmake /f Makefile.msvc.nmake`

#### Start of system configuration section. ####

CC = cl

## ref: [MSVC Compiler Options] https://msdn.microsoft.com/en-us/library/fwkeyyhe.aspx @@ https://archive.is/aOAtH

# Normal/usual flags
## /nologo :: startup without logo display
## /W3 :: set warning level to 3 [1..4, all; increasing level of warning scrutiny]
## /wd4996 :: suppress POSIX function name deprecation warning #C4996
## /WX :: treat warnings as errors
## /MT :: static linking
## /EHsc :: enable C++ EH (no SEH exceptions) + extern "C" defaults to nothrow (replaces deprecated /GX)
## /Ox :: maximum optimizations
## /O2 :: maximize speed
## /D "WIN32" :: old/extraneous define
## /D "_CONSOLE" :: old/extraneous define
## /D "NDEBUG" :: deactivate assert()
## /D "_CRT_SECURE_NO_WARNING" :: compiler directive == suppress "unsafe function" compiler warning
## /c :: compile only
CFLAGS = /nologo /W3 /wd4996 /WX /MT /EHsc /Ox /O2 /I "." /D "WIN32" /D "NDEBUG" /D "_CONSOLE" /D "_CRT_SECURE_NO_WARNINGS" /c
LDFLAGS = /nologo /subsystem:console /incremental:no /machine:I386

# DEBUG flags
## /MTd :: static linking to debug library
## /Od :: disable optimization
## /Gm :: enables minimal rebuild
## /Zi :: generates complete debugging information
#CFLAGS = /nologo /W3 /MTd /EHsc /Od /Gm /Zi /I "." /D "WIN32" /D "DEBUG" /D "_CONSOLE" /c
#LDFLAGS = /nologo /subsystem:console /incremental:yes /debug /machine:I386

LD = link
LIBS = user32.lib

#### End of system configuration section. ####

# This rule allows us to supply the necessary -D options
# in addition to whatever the user asks for.
.c.obj:
	$(CC) $(CFLAGS) $<

OBJ = \
	main.obj screen.obj brac.obj ch.obj charset.obj cmdbuf.obj \
	command.obj cvt.obj decode.obj edit.obj filename.obj forwback.obj \
	help.obj ifile.obj input.obj jump.obj line.obj linenum.obj \
	lsystem.obj mark.obj optfunc.obj option.obj opttbl.obj os.obj \
	output.obj pattern.obj position.obj prompt.obj search.obj signal.obj \
	tags.obj ttyin.obj version.obj regexp.obj

all: less.exe lesskey.exe

less.exe: $(OBJ)
	-if EXIST "lesskey.obj" del lesskey.obj
	$(LD) $(LDFLAGS) $** $(LIBS) /out:$@

lesskey.exe: lesskey.obj version.obj
	$(LD) $(LDFLAGS) lesskey.obj version.obj $(LIBS) /out:$@

defines.h: defines.wn
	-if EXIST "defines.h" del defines.h
	-copy defines.wn defines.h

$(OBJ): less.h defines.h funcs.h cmd.h

clean:
	-if EXIST "*.obj" del *.obj
	-if EXIST "defines.h" del defines.h
	-if EXIST "less.exe" del less.exe
	-if EXIST "lesskey.exe" del lesskey.exe

build: all
compile: $(OBJ)
realclean: clean
rebuild: clean build
vclean: realclean
